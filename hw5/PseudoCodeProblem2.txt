NUM_PATHS(int[][] adj) {
    int N = length(adj.length);
    Queue q = new Queue();

    boolean[] visited = new boolean[N + 1];
    int[] memo = new int[N + 1];

    q.add(S);
    visited[S] = true; memo[S] = 1;

    while(q.size() > 0) {
        int breadthSize = q.size();
        boolean[] visitedNow = new boolean[N + 1];
        for(int i = 0; i < breadthSize; i++) {
            int node = q.pop();
            for(int nei = 1; nei < adj[node].length; nei++) {
                if(adj[node][nei] == 1) {
                    if(!visited[nei]) {
                        visited[nei] = true;
                        visitedNow[nei] = true;
                        q.add(nei);
                        memo[nei] = memo[node];
                    } else if(visitedNow[nei]) {
                        memo[nei] += memo[node];
                    }
                } 
            }
        }
    }
    PRINT(memo[T]);
}